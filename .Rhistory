#Simulate x.tilde from the data-generating mechanism Pois(u*)
x.tilde <- rpois(n.sim, mu)
hist(x.tilde,
seq(30.5, 110.5, 1),
freq = F,
xlab = 'Number of Sandwiches',
ylab = 'Post. pred. density',
main = '',
col = 'plum')
mean(x.tilde)
quantile(x.tilde, c(.025, .975))
#Proportion of values abose 80
mean(x.tilde >= 80)
quantile(x.tilde, .99)
#Our dataset
dtf <- data.frame(Day = factor(c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'),
levels = c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')),
x = c(50, 65, 72, 63, 70))
#Parameters a and b for the posterior distribution:
dtf$post.a <- 700+dtf$x
dtf$post.b <- 10+1
#Posterior mean:
dtf$post.mean <- round(dtf$post.a / dtf$post.b, 1)
#Posterior credible intervals (lower and upper limits)
dtf$post.lo <- round(qgamma(.025, dtf$post.a, dtf$post.b), 1)
dtf$post.hi <- round(qgamma(.975, dtf$post.a, dtf$post.b), 1)
knitr::kable(dtf, caption = 'Sandwich Demand')
library(ggplot2)
ggplot(data = dtf) +
geom_point(aes(x = Day, y = post.mean)) +
geom_segment(aes(x = Day, xend = Day, y = post.lo, yend = post.hi)) +
ylab('Mean Demand')
factor(c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'),
levels = c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'))
set.seed(12345)
#Number of simulations
n.sim <- 10^4
#u    ~ Gamma(700, 10), the prior distribution
#xi/u ~ Pois(u) i = 1, ..., n, the likelihood
#u/x  ~ Gamma(1020, 15), the posterior distribution
#Simulate u* from its posterior Gamma(1020, 15) distribution
mu <- rgamma(n.sim, 1020, 15)
#Simulate x.tilde from the data-generating mechanism Pois(u*)
x.tilde <- rpois(n.sim, mu)
hist(x.tilde,
seq(30.5, 110.5, 1),
freq = F,
xlab = 'Number of Sandwiches',
ylab = 'Post. pred. density',
main = '',
col = 'plum')
mean(x.tilde)
quantile(x.tilde, c(.025, .975))
#Proportion of values above 80
mean(x.tilde >= 80)
#How much does the business need to stock, if they want to have less than 1% chance of running out?
#In other words, 99% of the posterior predictive distribution for x.tilde lie at or below 89.
#Thus, in order to be 99% certain not to run out of ingredients, the business should stock ingredients
#for 90 daily sandwiches.
quantile(x.tilde, .99)
#The sandwich business owner has heard that the average demand on Tuesday tends to be higher than the
#average demand on Monday, and would like to see, if this is true for them.
#But now, instead of treating all days as exchangeable, we are going to use Bayesâ€™ formula to derive
#posterior distribution for each day of the week. And we are still going to use the Gamma(700, 10) as
#the prior for every weekday-specific u.
#Our dataset
dtf <- data.frame(Day = factor(c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'),
levels = c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')),
x = c(50, 65, 72, 63, 70))
#Parameters a and b for the posterior distribution:
dtf$post.a <- 700+dtf$x
dtf$post.b <- 10+1
#Posterior mean:
dtf$post.mean <- round(dtf$post.a / dtf$post.b, 1)
#Posterior credible intervals (lower and upper limits)
dtf$post.lo <- round(qgamma(.025, dtf$post.a, dtf$post.b), 1)
dtf$post.hi <- round(qgamma(.975, dtf$post.a, dtf$post.b), 1)
knitr::kable(dtf, caption = 'Sandwich Demand')
library(ggplot2)
ggplot(data = dtf) +
geom_point(aes(x = Day, y = post.mean)) +
geom_segment(aes(x = Day, xend = Day, y = post.lo, yend = post.hi)) +
ylab('Mean Demand')
#Is the average demand on Tuesday higher than that on Monday?
set.seed(12345)
mu.monday <- rgamma(10^4, 750, 11)
mu.tuesday <- rgamma(10^4, 765, 11)
mean(mu.monday < mu.tuesday)
set.seed(12345)
#Size of the posterior sample
Niter <- 10^4
#Preparing the array for my posterior samples. 5 is the number of days in the week
mu.post <- array(dim = c(Niter, 5))
#Producing the posterior sample for each day in turn
for(j in 1:5){
mu.post[, j] <- rgamma(Niter, dtf$post.a[j], dtf$post.b[j])
}
head(mu.post)
ly(mu.post, 1, which.max)
print(table(m
max.mu <- apply(mu.post, 1, which.max)
print(table(max.mu))
head(mu.post)
max.mu <- apply(mu.post, 1, which.max)
print(table(max.mu))
mean(max.mu==3)
setwd("~/Desktop/PhD/epidemics-data")
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
for(row in rev_data_frame){
if(last_time != row$Time){
data_unique <-data_unique.append(row)
last_time <- row&Time
}
}
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev_data_frame$I, R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
for(row in rev_data_frame){
if(last_time != row.Time){
data_unique <-data_unique.append(row)
last_time <- row.Time
}
}
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev_data_frame$I, R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
for(row in rev_data_frame){
if(last_time != row["Time"]){
data_unique <-data_unique.append(row)
last_time <- row["Time"]
}
}
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev_data_frame$I, R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
for(row in rev_data_frame){
if(last_time != row["Time"]){
data_unique <-data_unique.append(row)
last_time <- row["Time"]
}
}
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev_data_frame$I, R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
data <- read.csv("SEIR_analysis/SEIR-analysis-1.trace", header=TRUE, sep="")
for(row in data)
q
for(d in data)
q
d
data
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
f <- function(row){
if(last_time != row$Time){
data_unique <-data_unique.append(row)
last_time <- row$Time
}
}
apply(rev_data_frame, 1, f)
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev_data_frame$I, R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
f <- function(row){
print(row)
if(last_time != row$Time){
data_unique <-data_unique.append(row)
last_time <- row$Time
}
}
apply(rev_data_frame, 1, f)
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev_data_frame$I, R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
f <- function(row){
print(row)
if(last_time != row[0]){
data_unique <-data_unique.append(row)
last_time <- row[0]
}
}
apply(rev_data_frame, 1, f)
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev_data_frame$I, R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
f <- function(row){
print(row.Time)
if(last_time != row[0]){
data_unique <-data_unique.append(row)
last_time <- row[0]
}
}
apply(rev_data_frame, 1, f)
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev_data_frame$I, R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
f <- function(row){
print(row["Time"])
if(last_time != row[0]){
data_unique <-data_unique.append(row)
last_time <- row[0]
}
}
apply(rev_data_frame, 1, f)
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev_data_frame$I, R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
f <- function(row){
#print(row["Time"])
if(last_time != row["Time"]){
data_unique <-data_unique.append(row)
last_time <- row["Time"]
}
}
apply(rev_data_frame, 1, f)
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev_data_frame$I, R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
f <- function(row){
#print(row["Time"])
if(last_time != row["Time"]){
data_unique[nrow(data_unique) + 1] <- row
#data_unique <- data_unique.append(row)
last_time <- row["Time"]
}
}
apply(rev_data_frame, 1, f)
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev_data_frame$I, R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
f <- function(row){
#print(row["Time"])
if(last_time != row["Time"]){
data_unique <- rbind(data_unique, row)
last_time <- row["Time"]
}
}
apply(rev_data_frame, 1, f)
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev_data_frame$I, R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
f <- function(row){
#print(row["Time"])
if(last_time != row["Time"]){
data_unique <- rbind(data_unique, row)
last_time <- row["Time"]
}
}
apply(rev_data_frame, 1, f)
R0 <- (infection_rate * S0) / recovery_rate
output <- rev(append(rev_data_frame$I, R0))
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
in_dir <- "SEIR_analysis/"
out_dir <- "dataset/Stochastic/data_inf_rate_0.00001-0.015/"
load(paste0(in_dir, "SEIR-analysis.RData"))
listFiles <- list.files(in_dir, pattern = ".trace")
data_unique <- data.frame()
lapply(listFiles, function(x){
data <- read.csv(paste0(in_dir, x), header=TRUE, sep="")
ID <- strtoi(gsub(".*[-]([^.]+)[.].*", "\\1", x))
S0 <- config[[1]][[ID]][[3]][[1]]
infection_rate <- config[[3]][[ID]][[3]]
recovery_rate <- config[[4]][[ID]][[3]]
transpose <- t(data)
transpose <- as.data.frame(transpose)
rev_data_frame <- rev(transpose)
rev_data_frame <- t(rev_data_frame)
rev_data_frame <- as.data.frame(rev_data_frame)
last_time <- rev_data_frame$Time[1] + 1
f <- function(row){
#print(row["Time"])
if(last_time != row["Time"]){
data_unique <- rbind(data_unique, row)
last_time <- row["Time"]
}
}
apply(rev_data_frame, 1, f)
R0 <- (infection_rate * S0) / recovery_rate
output <- append(rev(rev_data_frame$I), R0)
write.table(output, paste0(out_dir, x), col.names=FALSE, row.names=FALSE)
})
